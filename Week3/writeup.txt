

1. Whenever Jvascript error ocurs, browser displayes the following message.
   Web page may prevent it from being displayed properly or functioning properly.
   
** Rules to handle such cases:

Rule 1 :- Assume your code will fail

--> Never assume that code being beautiful means code is working 100% accurate.
    User might provide invalid data and we need to handle it and write code eror & exception handling accordingly.

    Eg:- object.extend = function (destination,source){
          for (var property in source){
		    destination[property]=source[property]
			}
		  return destination
		  }
	if destination or source is null it throws an error
	
Rule 2 :- Log errors to the server.
	
--> Best practice to handle errors is to store it on servers
	Always log errors to server.
	
Rule 3 :- You,not the browser, handle errors

-->	Before Browser responds with errors, you need to handle it using following ways
    1. use try catch
    2. Use window.onerror in IE and firefox to handle errors before going to browser stage.
	
Rule 4 :- Identify where errors might occur
--- Types od Errors---
-->	1. Type coercion errors
	   Type coercion means that when the operands of an operator are different types, 
	   one of them will be converted to an "equivalent" value of the other operand's type
	   Eg :- if we compare boolean===integer

	2. Data type errors
	   Generally occurs with function arguments, Typically a symptom of insufficient value checking.
        Datatypes might be different so we get this errors.
        Handle it by first getting type of variables using ( typeof) and proceed with comparison

    3. Communication errors
	   *Invalid URL/Post Data
            --> Typically long string concatenations
            --> Don't forget to user
            --> encode URIComponent() on each part - NotencodeURI()
            --> Make sure parameters are named correctly
	   
	   *Server Response Status
            --> 200 is the only valid status that may be returned
                - Beware of 304
            --> Any other status means you didn't get data
        
	   *No Network Connection
	        --> Internet Explorer throws an error when calling open() but then goes through normal lifecycle
	        --> Firefox fails silently but throws an error if you try to access any response property 
	   
	   *Server Response Content
	        --> A status of 200/304 is not enough
	        --> Server errors often returm HTML
	        --> If possible, set status to 500
	   
Rule 5 :- Throw your own errors
	
--> Use throw keyword to raise your own error rather than application throws error
	
    --> Errors should be thrown in the low-level parts of the app.
	    - Utilities, Core libraries etc.,
	--> Use try-catch blocks in higher level parts
	    - App-specific
	    - Client-side business logic
	
Rule 6 :- Distinguish Fatal VS Non-Fatal
	
	--> Non-Fatal errors
        - Wont interfere with user's main task
        - affects only a portion of the page (easily ignored/disabled)
        - recovery is possible
        - repeatative action may result appropriate result
        - dont tell users it isnt working unless necessary
    
    --> Fatal Errors    
        - The application absolutely cannot continue
	    - Significantly interfers with user's ability to be productive 
	    - Other errors will occur if the application continues
	    - Message the user immediately
        - Reload	
	
    Dont allow code to determine fatal is/is not fatal
        -- watchout for loops
    User experience comes first


Rule 7 :- Provide a debug mode.

    - Assign a variable that is globally available
    - Try-catch should re-throw the error
	- window.onerror should return false
	- Allow the browser to handle the error.